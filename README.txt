In order for the article_spinner.py to generate any content it is necessary to
run the following scripts in this order.

1. scraper.py
   1.1 This script extracts the needed html code that will be used as the
       input data for parser.py.
   1.2 There are comments explaining what each function does. It is important
       to read lines 47-52 and 66-69.

2. parser.py
   2.1 This script parses the html code and extracts the text. Each text (i.e.
       the speaker's talk) is saved as a .txt file.

3. master_text.py
   3.1 This script creates a file compiled of all the .txt files. The file is
       saved as master_text.txt and is used as the input for article_spinner.py
       and trigrams_and_trigram_model.py.
   3.2 Only run this script once

4. article_spinner.py
   4.1 This requires the master_text.txt as input.
   4.2 The structure of the trigram model is a duple of the two preceding words
       as a key and a list of all words that may follow the duple as the value.
   4.3 The trigram probability is built upon the words in the value list along
       with the probability of those words actually following the duple pair.
       A dictionary is created from the word as the key followed by its probability
       as the value.
   4.4 The way a spun article is generated by article_spinner.py is a black box.

================ This is not needed to run article_spinner.py ================
These instructions are optional. These may be useful for the user to understand
what the article spinner is actually doing (especially the trigrams_and_trigram_model.py).
The master_spun.py and tokenizer_and_pos_tagger.py scripts may be useful for
building features for the supervised machine learning.


1. trigrams_and_trigram_model.py
   1.1 This script creates two .txt files. The first is trigrams.txt and the
       second is trigram_probabilities.txt. These two .txt files are for the
       user. This makes the article_spinner.py less of a black box. If the user
       takes time to study the trigram_probabilities.txt they will begin to
       understand how the article_spinner.py generates spun articles. It still
       won't be completely transparent because there is still a level of
       randomness under the hood.

2. master_spun.py
   2.1 This script generates a master text file compiled of all the generated
       articles. This serves as input for tokenizer_and_pos_tagger.py.

3. tokenizer_and_pos_tagger.py
   3.1. This script is used to identify unique constructions found in the
        generated content. It may be useful to find features from the POS tags.
        The identified features can be used in the machine learning component.

           ================ This is for supervised ML ================
The machine learning component of this project is to identify whether or not a
generated article can be identified as being fake. Both real articles and fake
articles are feed into the ML algorithm. This algorithm uses features created
by the user. Currently the program identifies 48 Real and 1940 Fake. This is
not correct. There are an even number of real and fake articles.

